--- ../src-base/minecraft/net/minecraft/scoreboard/Score.java
+++ ../src-work/minecraft/net/minecraft/scoreboard/Score.java
@@ -1,6 +1,12 @@
 package net.minecraft.scoreboard;
 
+import carpet.CarpetServer;
+import carpet.CarpetSettings;
+import org.apache.commons.lang3.tuple.Pair;
+
 import java.util.Comparator;
+import java.util.Iterator;
+import java.util.LinkedList;
 
 public class Score
 {
@@ -8,13 +14,13 @@
     {
         public int compare(Score p_compare_1_, Score p_compare_2_)
         {
-            if (p_compare_1_.func_96652_c() > p_compare_2_.func_96652_c())
+            if (p_compare_1_.getScorePointsDelta() > p_compare_2_.getScorePointsDelta())
             {
                 return 1;
             }
             else
             {
-                return p_compare_1_.func_96652_c() < p_compare_2_.func_96652_c() ? -1 : p_compare_2_.func_96653_e().compareToIgnoreCase(p_compare_1_.func_96653_e());
+                return p_compare_1_.getScorePointsDelta() < p_compare_2_.getScorePointsDelta() ? -1 : p_compare_2_.func_96653_e().compareToIgnoreCase(p_compare_1_.func_96653_e());
             }
         }
     };
@@ -24,6 +30,7 @@
     private int field_96655_e;
     private boolean field_178817_f;
     private boolean field_178818_g;
+    private int scorePointsDelta;
 
     public Score(Scoreboard p_i2309_1_, ScoreObjective p_i2309_2_, String p_i2309_3_)
     {
@@ -79,6 +86,11 @@
         int i = this.field_96655_e;
         this.field_96655_e = p_96647_1_;
 
+        if (CarpetSettings.scoreboardDelta > 0) {
+            list.add(Pair.of(System.currentTimeMillis(), field_96655_e));
+            computeScoreDelta();
+        }
+
         if (i != p_96647_1_ || this.field_178818_g)
         {
             this.field_178818_g = false;
@@ -110,4 +122,33 @@
     {
         this.field_178817_f = p_178815_1_;
     }
+
+    // Added for changing scoreboard values to the score per time value option. CARPET-XCOM
+    LinkedList<Pair<Long,Integer>> list = new LinkedList<>();
+    public int getScorePointsDelta()
+    {
+        if(CarpetSettings.scoreboardDelta > 0) {
+            return this.scorePointsDelta;
+        }else{
+            return this.field_96655_e;
+        }
+    }
+    public void computeScoreDelta(){
+        int oldest = Integer.MIN_VALUE;
+        Iterator<Pair<Long, Integer>> iter = list.iterator();
+        while (iter.hasNext()) {
+            Pair p = iter.next();
+            if ((long)p.getKey() > (System.currentTimeMillis() - CarpetSettings.scoreboardDelta * 1000)) {
+                oldest = (int)p.getValue();
+                break;
+            } else {
+                iter.remove();
+            }
+        }
+        if (oldest != Integer.MIN_VALUE) {
+            scorePointsDelta = (int)((float) (field_96655_e - oldest) / (float) 10);
+        } else {
+            scorePointsDelta = 0;
+        }
+    }
 }

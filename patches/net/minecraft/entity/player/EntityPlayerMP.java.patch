--- ../src-base/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
+++ ../src-work/minecraft/net/minecraft/entity/player/EntityPlayerMP.java
@@ -1,5 +1,8 @@
 package net.minecraft.entity.player;
 
+import carpet.logging.LoggerRegistry;
+import carpet.patches.EntityPlayerMPFake;
+import carpet.utils.Messenger;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import io.netty.buffer.Unpooled;
@@ -21,6 +24,7 @@
 import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IMerchant;
+import net.minecraft.entity.monster.EntityCreeper;
 import net.minecraft.entity.passive.AbstractHorse;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.init.Items;
@@ -38,35 +42,14 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.CraftingManager;
 import net.minecraft.item.crafting.IRecipe;
+import net.minecraft.nbt.JsonToNBT;
+import net.minecraft.nbt.NBTException;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.network.Packet;
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.client.CPacketClientSettings;
-import net.minecraft.network.play.server.SPacketAnimation;
-import net.minecraft.network.play.server.SPacketCamera;
-import net.minecraft.network.play.server.SPacketChangeGameState;
-import net.minecraft.network.play.server.SPacketChat;
-import net.minecraft.network.play.server.SPacketCloseWindow;
-import net.minecraft.network.play.server.SPacketCombatEvent;
-import net.minecraft.network.play.server.SPacketCustomPayload;
-import net.minecraft.network.play.server.SPacketDestroyEntities;
-import net.minecraft.network.play.server.SPacketEffect;
-import net.minecraft.network.play.server.SPacketEntityEffect;
-import net.minecraft.network.play.server.SPacketEntityStatus;
-import net.minecraft.network.play.server.SPacketOpenWindow;
-import net.minecraft.network.play.server.SPacketPlayerAbilities;
-import net.minecraft.network.play.server.SPacketRemoveEntityEffect;
-import net.minecraft.network.play.server.SPacketResourcePackSend;
-import net.minecraft.network.play.server.SPacketSetExperience;
-import net.minecraft.network.play.server.SPacketSetSlot;
-import net.minecraft.network.play.server.SPacketSignEditorOpen;
-import net.minecraft.network.play.server.SPacketSoundEffect;
-import net.minecraft.network.play.server.SPacketUpdateHealth;
-import net.minecraft.network.play.server.SPacketUpdateTileEntity;
-import net.minecraft.network.play.server.SPacketUseBed;
-import net.minecraft.network.play.server.SPacketWindowItems;
-import net.minecraft.network.play.server.SPacketWindowProperty;
+import net.minecraft.network.play.server.*;
 import net.minecraft.potion.PotionEffect;
 import net.minecraft.scoreboard.IScoreCriteria;
 import net.minecraft.scoreboard.Score;
@@ -114,6 +97,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import net.minecraft.entity.item.EntityMinecart;
+import net.minecraft.entity.passive.EntityLlama;
+
+import carpet.CarpetSettings;
+import carpet.helpers.EntityPlayerActionPack;
+import carpet.helpers.StatSubItem;
+import carpet.helpers.IPlayerSensitiveTileEntity;
+import carpet.logging.logHelpers.DamageReporter;
+
 public class EntityPlayerMP extends EntityPlayer implements IContainerListener
 {
     private static final Logger field_147102_bM = LogManager.getLogger();
@@ -153,6 +145,12 @@
     public int field_71138_i;
     public boolean field_71136_j;
 
+    //CM
+    public EntityPlayerActionPack actionPack;
+
+    // [CM] PistonClippingFix -- Counter
+    public int pistonClippingCounter;
+
     public EntityPlayerMP(MinecraftServer p_i45285_1_, WorldServer p_i45285_2_, GameProfile p_i45285_3_, PlayerInteractionManager p_i45285_4_)
     {
         super(p_i45285_2_, p_i45285_3_);
@@ -188,6 +186,9 @@
         {
             this.func_70107_b(this.field_70165_t, this.field_70163_u + 1.0D, this.field_70161_v);
         }
+
+        //CM
+        actionPack = new EntityPlayerActionPack(this);
     }
 
     public void func_70037_a(NBTTagCompound p_70037_1_)
@@ -313,6 +314,9 @@
 
     public void func_70071_h_()
     {
+        //CM
+        actionPack.onUpdate();
+        //CM end
         this.field_71134_c.func_73075_a();
         --this.field_147101_bU;
 
@@ -365,6 +369,13 @@
             }
         }
 
+        if (CarpetSettings.ridingPlayerUpdateFix) {
+            Entity riding = func_184208_bv();
+            if(riding != null && (riding instanceof EntityMinecart || riding instanceof EntityLlama)){
+                this.field_71133_b.func_184103_al().func_72358_d(this);
+            }
+        }
+
         CriteriaTriggers.field_193135_v.func_193182_a(this);
 
         if (this.field_193107_ct != null)
@@ -373,6 +384,9 @@
         }
 
         this.field_192042_bX.func_192741_b(this);
+
+        // Clears the dupe item for the duping bug CARPET-XCOM
+        clearDupeItem();
     }
 
     public void func_71127_g()
@@ -503,6 +517,34 @@
             this.field_71071_by.func_70436_m();
         }
 
+        // Allows players to drop there skulls when blown up by charged creeper CARPET-XCOM
+        if (CarpetSettings.playerSkullsByChargedCreeper)
+        {
+            Entity entity = p_70645_1_.func_76346_g();
+            
+            if (entity instanceof EntityCreeper)
+            {
+                EntityCreeper entitycreeper = (EntityCreeper) entity;
+                
+                if (entitycreeper.func_70830_n() && entitycreeper.func_70650_aV())
+                {
+                    entitycreeper.func_175493_co();
+                    
+                    try
+                    {
+                        ItemStack playerskull = new ItemStack(Items.field_151144_bL, 1, 3);
+                        playerskull.func_77982_d(JsonToNBT.func_180713_a(String.format("{SkullOwner:\"%s\"}", func_70005_c_().toLowerCase())));
+                        this.func_70099_a(playerskull, 0.0F);
+                    }
+                    catch (NBTException e)
+                    {
+                        e.printStackTrace();
+                    }
+                }
+            }
+        }
+        // CM
+
         for (ScoreObjective scoreobjective : this.field_70170_p.func_96441_U().func_96520_a(IScoreCriteria.field_96642_c))
         {
             Score score = this.func_96123_co().func_96529_a(this.func_70005_c_(), scoreobjective);
@@ -605,6 +647,7 @@
 
             if (!flag && this.field_147101_bU > 0 && p_70097_1_ != DamageSource.field_76380_i)
             {
+                DamageReporter.modify_damage(this, p_70097_1_, p_70097_2_, 0.0F, "respawn protection");
                 return false;
             }
             else
@@ -615,6 +658,7 @@
 
                     if (entity instanceof EntityPlayer && !this.func_96122_a((EntityPlayer)entity))
                     {
+                        DamageReporter.modify_damage(this, p_70097_1_, p_70097_2_, 0.0F, "PVP disabled");
                         return false;
                     }
 
@@ -624,6 +668,7 @@
 
                         if (entityarrow.field_70250_c instanceof EntityPlayer && !this.func_96122_a((EntityPlayer)entityarrow.field_70250_c))
                         {
+                            DamageReporter.modify_damage(this, p_70097_1_, p_70097_2_, 0.0F, "PVP disabled");
                             return false;
                         }
                     }
@@ -704,6 +749,8 @@
         if (p_147097_1_ != null)
         {
             SPacketUpdateTileEntity spacketupdatetileentity = p_147097_1_.func_189518_D_();
+            if (p_147097_1_ instanceof IPlayerSensitiveTileEntity)
+                spacketupdatetileentity = ((IPlayerSensitiveTileEntity) p_147097_1_).getUpdatePacketPlayerSensitive(this);
 
             if (spacketupdatetileentity != null)
             {
@@ -916,6 +963,7 @@
 
     public void func_184826_a(AbstractHorse p_184826_1_, IInventory p_184826_2_)
     {
+
         if (this.field_71070_bA != this.field_71069_bz)
         {
             this.func_71053_j();
@@ -1027,6 +1075,8 @@
 
     public void func_71064_a(StatBase p_71064_1_, int p_71064_2_)
     {
+        if(!CarpetSettings.fakePlayerStats && this instanceof EntityPlayerMPFake) return;
+
         if (p_71064_1_ != null)
         {
             this.field_147103_bO.func_150871_b(this, p_71064_1_, p_71064_2_);
@@ -1035,6 +1085,10 @@
             {
                 this.func_96123_co().func_96529_a(this.func_70005_c_(), scoreobjective).func_96649_a(p_71064_2_);
             }
+
+            // CM
+            if (p_71064_1_ instanceof StatSubItem) func_71064_a(((StatSubItem) p_71064_1_).getBase(), p_71064_2_);
+            // CM END
         }
     }
 
@@ -1169,7 +1223,7 @@
 
     protected void func_70688_c(PotionEffect p_70688_1_)
     {
-        super.func_70688_c(p_70688_1_);
+        if (!CarpetSettings.effectsFix) super.func_70688_c(p_70688_1_);
         this.field_71135_a.func_147359_a(new SPacketRemoveEntityEffect(this.func_145782_y(), p_70688_1_.func_188419_a()));
 
         if (p_70688_1_.func_188419_a() == MobEffects.field_188424_y)
@@ -1178,6 +1232,7 @@
         }
 
         CriteriaTriggers.field_193139_z.func_193153_a(this);
+        if (CarpetSettings.effectsFix) super.func_70688_c(p_70688_1_);
     }
 
     public void func_70634_a(double p_70634_1_, double p_70634_3_, double p_70634_5_)
@@ -1216,13 +1271,17 @@
 
         if (p_71033_1_ == GameType.SPECTATOR)
         {
+            if(CarpetSettings.spectatorsDontLoadChunks) ((WorldServer)field_70170_p).func_184164_w().func_72695_c(this);
             this.func_192030_dh();
             this.func_184210_p();
         }
         else
         {
+            if(CarpetSettings.spectatorsDontLoadChunks) ((WorldServer)field_70170_p).func_184164_w().func_72683_a(this);
+            disableSpectatePlayers = false; // Rule to prevent /c camera mode to spectate other players, disable after exiting spectator mode CARPET-XCOM
             this.func_175399_e(this);
         }
+        gamemodeCamera = false;
 
         this.func_71016_p();
         this.func_175136_bO();
@@ -1233,6 +1292,11 @@
         return this.field_71134_c.func_73081_b() == GameType.SPECTATOR;
     }
 
+    public boolean isSurvival()
+    {
+        return this.field_71134_c.func_73081_b() == GameType.SURVIVAL;
+    }
+
     public boolean func_184812_l_()
     {
         return this.field_71134_c.func_73081_b() == GameType.CREATIVE;
@@ -1439,4 +1503,113 @@
     {
         return this.field_193110_cw;
     }
+
+    // Adding this dupe feature to make it compatible with carpet 12.0 as per community request. CARPET-XCOM
+    private int dupe;
+    private boolean scanForDuping;
+    public void clearDupeItem() {
+        dupe = Integer.MIN_VALUE;
+    }
+    public void dupeItem(int slot) {
+        if(scanForDuping){
+            dupe = slot;
+        }
+    }
+    public int getDupeItem() {
+        return dupe;
+    }
+    public void dupeItemScan(boolean s){
+        scanForDuping = s;
+    }
+
+    // Remove some exploits caused by /c to and /s
+    private double storeX;
+    private double storeY;
+    private double storeZ;
+    private float storeYaw;
+    private float storePitch;
+    private int storedDim;
+    protected boolean disableSpectatePlayers;
+    private boolean gamemodeCamera;
+    private boolean nightvision;
+    public void setCameraData(EntityPlayerMP player) {
+        storeX = player.storeX;
+        storeY = player.storeY;
+        storeZ = player.storeZ;
+        storeYaw = player.storeYaw;
+        storePitch = player.storePitch;
+        storedDim = player.storedDim;
+        disableSpectatePlayers = player.disableSpectatePlayers;
+        gamemodeCamera = player.gamemodeCamera;
+        nightvision = player.nightvision;
+    }
+    public void storeCameraData(boolean hasNightvision) {
+        storeX = field_70165_t;
+        storeY = field_70163_u;
+        storeZ = field_70161_v;
+        storeYaw = field_70177_z;
+        storePitch = field_70125_A;
+        storedDim = field_71093_bK;
+        disableSpectatePlayers = CarpetSettings.cameraModeDisableSpectatePlayers;
+        nightvision = hasNightvision;
+    }
+    public void setGamemodeCamera(){
+        gamemodeCamera = true;
+    }
+    public boolean getGamemodeCamera(){
+        return gamemodeCamera;
+    }
+    public boolean hadNightvision() {return nightvision;}
+    public boolean moveToStoredCameraData(){
+        if(CarpetSettings.cameraModeRestoreLocation){
+            if(storedDim != field_71093_bK){
+                WorldServer worldserver1 = func_71121_q();
+                WorldServer worldserver2 = (WorldServer)field_71133_b.func_71218_a(storedDim);
+                field_71093_bK = storedDim;
+                field_71135_a.func_147359_a(new SPacketRespawn(field_71093_bK, worldserver1.func_175659_aa(), worldserver1.func_72912_H().func_76067_t(), this.field_71134_c.func_73081_b()));
+                this.field_71133_b.func_184103_al().func_187243_f(this);
+                if(LoggerRegistry.__invisDebug){ // Added debugger for the complex bug turning players invisible. CARPET-XCOM
+                    LoggerRegistry.getLogger("invisDebug").log(()-> new ITextComponent[]{
+                            Messenger.s(null, "s2: " + worldserver1.field_72996_f.contains(this) + " " + worldserver2.field_72996_f.contains(this))
+                    });
+                }
+                worldserver1.func_72900_e(this);
+                field_70128_L = false;
+                worldserver1.func_72964_e(field_70176_ah, field_70164_aj).func_76608_a(this, field_70162_ai);
+
+                if (func_70089_S())
+                {
+                    func_70012_b(storeX, storeY, storeZ, storeYaw, storePitch);
+                    worldserver2.func_72838_d(this);
+                    worldserver2.func_72866_a(this, false);
+                }
+                if(LoggerRegistry.__invisDebug){ // Added debugger for the complex bug turning players invisible. CARPET-XCOM
+                    LoggerRegistry.getLogger("invisDebug").log(()-> new ITextComponent[]{
+                            Messenger.s(null, "s3: " + worldserver1.field_72996_f.contains(this) + " " + worldserver2.field_72996_f.contains(this) + " " + func_70089_S() + " " + this.func_110143_aJ())
+                    });
+                }
+                func_70029_a(worldserver2);
+                this.field_71133_b.func_184103_al().func_72375_a(this, worldserver1);
+                func_70634_a(storeX, storeY, storeZ);
+                field_71134_c.func_73080_a(worldserver2);
+                this.field_71133_b.func_184103_al().func_72354_b(this, worldserver2);
+                this.field_71133_b.func_184103_al().func_72385_f(this);
+                if(LoggerRegistry.__invisDebug){ // Added debugger for the complex bug turning players invisible. CARPET-XCOM
+                    LoggerRegistry.getLogger("invisDebug").log(()-> new ITextComponent[]{
+                            Messenger.s(null, "s4: " + worldserver1.field_72996_f.contains(this) + " " + worldserver2.field_72996_f.contains(this))
+                    });
+                }
+                return true;
+            }else {
+                if(storeX == 0 && storeY == 0 && storeZ == 0) storeY = 256.0f;
+                double dist = Math.sqrt(new BlockPos(storeX, storeY, storeZ).func_177954_c(field_70165_t, field_70163_u, field_70161_v));
+                field_71135_a.func_147364_a(storeX, storeY, storeZ, storeYaw, storePitch);
+                return dist > (this.field_71133_b.func_184103_al().func_72395_o()-2)*16;
+            }
+        }
+        return false;
+    }
+    public boolean isDisableSpectatePlayers(){
+        return disableSpectatePlayers;
+    }
 }
